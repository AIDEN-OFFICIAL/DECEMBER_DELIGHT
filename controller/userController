const User = require('../models/userSchema');
const Category = require('../models/categorySchema');
const Product = require('../models/productSchema');
const Wishlist = require('../models/wishlistSchema');
const Cart = require('../models/cartSchema');
const Coupon = require('../models/couponSchema');
const bcrypt = require('bcrypt');
const nodemailer = require('nodemailer');
const env = require('dotenv').config();
var shop = false;

const pagenotfound = async (req, res) => {
  res.status(404).render('notfound', { title: 'Page Not Found' });
};

const loadHomePage = async (req, res) => {
  try {
    shop = false;
    const user = req.session.user;
    const categories = await Category.find({ isListed: true });

    let productData = await Product.find({
      isBlocked: false,
      category: { $in: categories.map((category) => category._id) },
      quantity: { $gt: 0 },
    })
      .populate('category')
      .sort({ createdAt: -1 })
      .limit(8);

    // productData.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

    if (user) {
      const userData = await User.findOne({ _id: user._id });
      const cartAmount = await Cart.findOne({
        userId: user._id,
        status: 'active',
      });
      res.render('home', { user: userData, products: productData, cartAmount });
    } else {
      res.render('home', { user: null, products: productData });
    }
  } catch (error) {
    console.error('Error loading homepage:', error);
    res.status(500).send('Server error while loading homepage');
  }
};

const loadSignup = async (req, res) => {
  try {
    if (req.session.user) {
      res.redirect('/');
    } else {
      res.render('signup', { message: null });
    }
  } catch (err) {
    console.log('error in signingup ', err);
    res.status(500).send('Server Error');
  }
};

function generateOtp() {
  return Math.floor(100000 + Math.random() * 900000).toString();
}

async function sendVerificationEmail(email, otp) {
  try {
    let transporter = nodemailer.createTransport({
      service: 'gmail',
      port: 587,
      secure: false,
      require: true,
      auth: {
        user: process.env.NODEMAILER_EMAIL,
        pass: process.env.NODEMAILER_PASSWORD,
      },
    });

    const info = await transporter.sendMail({
      from: process.env.NODEMAILER_EMAIL,
      to: email,
      subject: 'Verify your account',
      text: `Your OTP is ${otp}`,
      html: `<b>Your otp is ${otp}</b>`,
    });

    return info.accepted.length > 0;
  } catch (err) {
    console.error('Error sending email', err);
    return false;
  }
}

const signup = async (req, res) => {
  const name = req.body.name.trim();
  const email = req.body.email.trim();
  const password = req.body.password.trim();
  const confirmPassword = req.body.confirmPassword.trim();

  //Input validation
  if (!name || !email || !password || !confirmPassword) {
    return res.render('signup', { message: 'All fields are required' });
  }

  //name validation
  const nameRegex = /^[a-zA-Z\s]{2,30}$/;
  if (!name || !nameRegex.test(name)) {
    return res.render('signup', {
      message: 'Name must contain only letters and spaces (2-30 characters).',
    });
  }

  // Email validation
  const emailRegex = /.+\@.+\..+/;
  if (!emailRegex.test(email)) {
    return res.render('signup', {
      message: 'Please enter a valid email address',
    });
  }

  if (password.length < 6) {
    return res.render('signup', {
      message: 'Password must be at least 6 characters long',
    });
  }

  //password check
  if (password !== confirmPassword) {
    return res.render('signup', { message: 'Passwords do not match' });
  }

  // Check if user already exists
  try {
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.render('signup', { message: 'Email is already registered' });
    }

    const otp = generateOtp();
    const emailSent = await sendVerificationEmail(email, otp);
    if (!emailSent) {
      return res.json('email-error');
    }

    req.session.userOtp = otp;
    req.session.userData = { name, email, password };

    res.render('verifyOtp', { message: null });
    console.log('OTP sent:', otp);
  } catch (err) {
    console.error('Error in user signup:', err);
    res.status(500).send('Server Error');
  }
};

const verifyOtp = async (req, res) => {
  const { otp, resend } = req.body;
  console.log('Received OTP:', otp); // Log received OTP
  console.log('Stored OTP from session:', req.session.userOtp); // Log stored OTP

  if (resend) {
    // Resend OTP logic
    const newOtp = generateOtp();
    const email = req.session.userData.email;
    console.log('Generated OTP:', newOtp);

    const emailSent = await sendVerificationEmail(email, newOtp);

    if (!emailSent) {
      return res.json({ success: false, message: 'Error sending OTP' });
    }
    req.session.userOtp = newOtp; // Update OTP in session
    return res.json({ success: true, message: 'OTP resent successfully' });
  }

  // OTP verification logic
  if (otp !== req.session.userOtp) {
    console.log('OTP mismatch'); // Log OTP mismatch
    return res.json({ success: false, message: 'Invalid OTP' });
  }

  try {
    const { name, email, password } = req.session.userData;
    const newUser = new User({ name, email, password });
    await newUser.save();

    req.session.userOtp = null;
    req.session.userData = null;
    console.log('User verified successfully'); // Log success message

    return res.json({ success: true, message: 'User verified successfully' });
  } catch (err) {
    console.error('Error verifying OTP:', err);
    return res.status(500).send('Server Error');
  }
};

const forgotPassword = async (req, res) => {
  const { otp, resend } = req.body;
  console.log('Received OTP:', otp); // Log received OTP
  console.log('Stored OTP from session:', req.session.userOtp); // Log stored OTP

  if (resend) {
    // Resend OTP logic
    const newOtp = generateOtp();
    const email = req.session.userData.email;
    console.log('forgorpass', email);

    console.log('Generated OTP:', newOtp);

    const emailSent = await sendVerificationEmail(email, newOtp);

    if (!emailSent) {
      return res.json({ success: false, message: 'Error sending OTP' });
    }
    req.session.userOtp = newOtp; // Update OTP in session
    return res.json({ success: true, message: 'OTP resent successfully' });
  }

  // OTP verification logic
  if (otp !== req.session.userOtp) {
    console.log('OTP mismatch'); // Log OTP mismatch
    return res.json({ success: false, message: 'Invalid OTP' });
  }

  try {
    req.session.userOtp = null;
    console.log('User verified successfully'); // Log success message

    return res.json({ success: true, message: 'User verified successfully' });
  } catch (err) {
    console.error('Error verifying OTP:', err);
    return res.status(500).send('Server Error');
  }
};

const getForgotPassword = async (req, res) => {
  try {
    res.render('resetPassword');
  } catch (error) {
    console.error('Error in loading reset password page', err);
    return res.redirect('/pageError');
  }
};

const resetPassword = async (req, res) => {
  try {
    const email = req.session.userData.email;
    const password = req.body.password;

    const user = await User.findOne({ email });

    user.password = password;
    console.log(user.password);
    await user.save();

    req.session.userData = null;
  } catch (error) {
    console.error('Error resetting Password:', error);
    return res.status(500).send('Server Error');
  }
};

const loadSignin = async (req, res) => {
  try {
    const successMessage = req.session.successMessage || '';
    const errorMessage = req.session.message || '';

    req.session.successMessage = null;
    req.session.message = null;
    if (req.session.user) {
      res.redirect('/');
    } else {
      res.render('signin', { successMessage, errorMessage });
    }
  } catch (err) {
    console.log('error in signingup ', err);
    res.status(500).send('Server Error');
  }
};

const logout = async (req, res) => {
  req.session.destroy((err) => {
    if (err) {
      console.error('Error during logout:', err);
      return res.redirect('/pageError');
    }
    res.redirect('/');
  });
};

const signin = async (req, res) => {
  const password = req.body.password;
  const email = req.body.email.toLowerCase().trim();
  try {
    const existingUser = await User.findOne({ isAdmin: 0, email: email });
    if (!existingUser) {
      return res.render('signin', {
        errorMessage: 'Invalid credentials',
        successMessage: null,
      });
    }
    if (existingUser.isBlocked) {
      return res.render('signin', {
        errorMessage: 'User is Blocked by ADMIN',
        successMessage: null,
      });
    }
    const passwordMatch = await bcrypt.compare(password, existingUser.password);
    if (!passwordMatch) {
      return res.render('signin', {
        errorMessage: 'Incorrect Password',
        successMessage: null,
      });
    }

    req.session.user = existingUser;

    req.session.successMessage = 'Signed in successfully!';

    return res.redirect('/');
  } catch (err) {
    console.log('error in login ', err);
    return res.render('signin', {
      errorMessage: 'Login failed please try again later',
      successMessage: null,
    });
  }
};

const forgotOtp = async (req, res) => {
  try {
    if (req.session.user) {
      res.redirect('/');
    } else {
      const email = req.query.email;
      const otp = generateOtp();
      const existingUser = await User.findOne({ email });
      if (!existingUser) {
        return res.render('signin', {
          errorMessage: 'Email is not registered please Signup',
          successMessage: null,
        });
      }
      const emailSent = await sendVerificationEmail(email, otp);
      if (!emailSent) {
        return res.json('email-error');
      }

      req.session.userOtp = otp;
      req.session.userData = { email };
      res.render('forgotOtp');
      console.log('OTP sent:', otp);
    }
  } catch (err) {
    res.status(500).send('Server Error');
  }
};

const viewProduct = async (req, res) => {
  try {
    const productId = req.params.id; // Get the product ID from the URL
    const product = await Product.findById(productId).populate('category'); // Find the product by ID and populate the category
    let wishlist = [];

    if (!product) {
      return res.status(404).send('Product not found');
    }
    const user = req.session.user;
    let cartAmount = 0;
    if (user) {
      cartAmount = await Cart.findOne({ userId: user._id, status: 'active' });

      const userWishlist = await Wishlist.findOne({ userId: user._id });
      if (userWishlist) {
        wishlist = userWishlist.items.map((item) => item.productId.toString());
      }
    }
    res.render('productDetails', { product, user, cartAmount, wishlist }); // Pass both product and user data to the view
  } catch (error) {
    console.error('Error retrieving product:', error);
    res.status(500).send('Server error while retrieving product');
  }
};
const getShop = async (req, res) => {
  try {
    shop = true;
    let search = req.query.search || '';
    const sort = req.query.sort || '';
    const categoryId = req.query.categoryId;
    const category = await Category.find({ isListed: true });
    const currentPage = parseInt(req.query.page) || 1; // Get current page from query, default to 1
    const pageSize = 8;
    let query = { name: { $regex: search, $options: 'i' } };
    if (categoryId) {
      query.category = categoryId;
    }

    let sortOption = {};

    switch (sort) {
      case 'asc':
        sortOption = { name: 1 };
        break;
      case 'desc':
        sortOption = { name: -1 };
        break;
      case 'highPrice':
        sortOption = { salePrice: -1 };
        break;
      case 'lowPrice':
        sortOption = { salePrice: 1 };
        break;
      case 'latest':
        sortOption = { createdAt: -1 };
        break;
      default:
        sortOption = {};
    }

    const totalProducts = await Product.countDocuments(query);
    const products = await Product.find(query)
      .sort(sortOption)
      .populate('category', 'name')
      .skip((currentPage - 1) * pageSize)
      .limit(pageSize);

    const totalPages = Math.ceil(totalProducts / pageSize);

    console.log(products);

    const user = req.session.user;
    let cartAmount = null;
    if (user) {
      cartAmount = await Cart.findOne({ userId: user._id, status: 'active' });
    }
    if (req.get('X-Requested-With') === 'XMLHttpRequest') {
      return res.json({
        products,
        user,
        category,
        categoryId,
        search,
        sort,
        cartAmount,
      });
    }
    res.render('shop', {
      products,
      user,
      category,
      categoryId,
      search,
      sort,
      cartAmount,
      currentPage,
      pageSize,
      totalPages,
      totalProducts,
    });
  } catch (error) {
    console.error('Error retrieving product:', error);
    res.status(500).send('Server error while retrieving product');
  }
};
const getCart = async (req, res) => {
  try {
    if (!req.session || !req.session.user) {
      console.log('user not found.');
      return res
        .status(401)
        .json({ error: 'Login required to access the Cart.' });
    }
    const user = req.session.user;
    const userId = req.session.user._id;
    let cart = await Cart.findOne({ userId, status: 'active' }).populate(
      'items.productId'
    );
    const cartAmount = await Cart.findOne({ userId: userId, status: 'active' }); // for displaying cart amount in the header
    const coupon = await Coupon.find({});
    if (!cart) {
      return res.render('shoping-cart', {
        empty: true,
        user,
        shop,
        cartAmount,
        coupon,
      });
      shop = false;
    } else {
      return res.render('shoping-cart', {
        empty: false,
        cart,
        user,
        shop,
        cartAmount,
        coupon,
      });
      shop = false;
    }
  } catch (error) {
    res.redirect('/pageError');
  }
};
const getWishlist = async (req, res) => {
  try {
    const user = req.session.user;
    const userId = req.session.user._id;
    const cartAmount = await Cart.findOne({ userId: userId, status: 'active' });
    const wishlist = await Wishlist.findOne({ userId }).populate(
      'items.productId'
    );

    return res.render('wishList', {
      user,
      shop,
      cartAmount,
      wishlist: wishlist?.items || [],
    });
    shop = false;
  } catch (error) {
    res.redirect('/pageError');
  }
};
const changePassword = async (req, res) => {
  const { currentPassword, newPassword } = req.body;
  try {
    if (!req.session || !req.session.user) {
      return res.status(401).json({
        success: false,
        message: 'Unauthorized. Please log in first.',
      });
    }
    const user = await User.findById(req.session.user._id);
    if (!user) {
      return res
        .status(404)
        .json({ success: false, message: 'User not found.' });
    }

    const isPasswordMatch = await user.comparePassword(currentPassword);
    if (!isPasswordMatch) {
      return res
        .status(400)
        .json({ success: false, message: 'Current password is incorrect.' });
    }

    user.password = newPassword;
    await user.save();

    return res
      .status(200)
      .json({ success: true, message: 'Password updated successfully.' });
  } catch (error) {
    console.error('Error changing password:', error);
    return res.status(500).json({
      success: false,
      message: 'Internal server error. Please try again.',
    });
  }
};

module.exports = {
  loadHomePage,
  loadSignup,
  loadSignin,
  signup,
  verifyOtp,
  signin,
  forgotOtp,
  forgotPassword,
  getForgotPassword,
  resetPassword,
  getCart,
  logout,
  pagenotfound,
  viewProduct,
  getShop,
  getWishlist,
  changePassword,
};
