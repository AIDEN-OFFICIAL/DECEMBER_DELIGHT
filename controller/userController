const User = require('../models/userSchema');
const bcrypt = require('bcrypt');
const nodemailer = require('nodemailer');
const env = require('dotenv').config();

const pagenotfound = async (req, res) => {
  res.status(404).render('notfound', { title: 'Page Not Found' });
};

const loadHomePage = async (req, res) => {
  try {
    // Any logic for homepage rendering, like fetching data, can go here
    res.render('home');
    // res.render('index', { title: 'Welcome to Our eCommerce Site' });
  } catch (error) {
    console.error('Error loading homepage:', error);
    res.status(500).send('Server error while loading homepage');
  }
};

const loadSignup = async (req, res) => {
  try {
    res.render('signup', { message: null });
  } catch (err) {
    console.log('error in signingup ', err);
    res.status(500).send('Server Error');
  }
};

function generateOtp() {
  return Math.floor(100000 + Math.random()* 900000).toString()
}

async function sendVerificationEmail(email, otp) {
  try {
    let transporter = nodemailer.createTransport({
      service: 'gmail',
      port: 587,
      secure: false,
      require: true,
      auth: {
        user:process.env.NODEMAILER_EMAIL,
        pass:process.env.NODEMAILER_PASSWORD
      }
    })
  
    
    const info = await transporter.sendMail({
      from: process.env.NODEMAILER_EMAIL,
      to: email,
      subject: "Verify your account",
      text:`Your OTP is ${otp}`,
      html:`<b>Your otp is ${otp}</b>`, 
    })

    return info.accepted.length >0
  }
  catch (err) {
    console.error("Error sending email", err)
    return false;
  }
  
}

const signup = async (req, res) => {
  const name = req.body.name.trim();
  const email = req.body.email.trim();
  const password = req.body.password.trim();
  const confirmPassword = req.body.confirmPassword.trim();

  //Input validation
  if (!name || !email || !password || !confirmPassword) {
    return res.render('signup', { message: 'All fields are required' });
  }

  //name validation
  const nameRegex = /^[a-zA-Z\s]{2,30}$/;
  if (!name || !nameRegex.test(name)) {
    return res.render('signup', {
      message: 'Name must contain only letters and spaces (2-30 characters).',
    });
  }

  // Email validation
  const emailRegex = /.+\@.+\..+/;
  if (!emailRegex.test(email)) {
    return res.render('signup', {
      message: 'Please enter a valid email address',
    });
  }

  if (password.length < 6) {
    return res.render('signup',{ message: "Password must be at least 6 characters long" });
  }
  
  //password check
  if (password !== confirmPassword) {
    return res.render('signup', { message: 'Passwords do not match' });
  }

  // Check if user already exists
  try {
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.render('signup', { message: 'Email is already registered' });
    }

    const otp = generateOtp();
    const emailSent = await sendVerificationEmail(email, otp)
    if (!emailSent) {
      return res.json("email-error")
    }

    req.session.userOtp=otp
    req.session.userData = { name,email, password }
    
    res.render("verifyOtp", { message: null });
    console.log("OTP sent:",otp)

  } catch (err) {
    console.error('Error in user signup:', err);
    res.status(500).send('Server Error');
  }
};

const verifyOtp = async (req, res) => {
  const { otp, resend } = req.body;

  if (resend) {
      // Resend OTP logic
      const newOtp = generateOtp();
    const email = req.session.userData.email; 
    console.log('Generated OTP:', newOtp);  // Log the new OTP to test if it's generated

      const emailSent = await sendVerificationEmail(email, newOtp);
    
      if (!emailSent) {
          return res.json({ success: false, message: "Error sending OTP" });
      }
      req.session.userOtp = newOtp; // Update OTP in session
      return res.json({ success: true, message: "OTP resent successfully" });
  }

  // OTP verification logic
  if (otp !== req.session.userOtp) {
      return res.json({ success: false, message: "Invalid OTP" });
  }

  try {
      const { name, email, password } = req.session.userData;
    
      const newUser = new User({ name, email, password});
      await newUser.save();

      // Clear OTP and session data after successful registration
      req.session.userOtp = null;
      req.session.userData = null;

      return res.json({ success: true, message: "User verified successfully" });
  } catch (err) {
      console.error('Error verifying OTP:', err);
      return res.status(500).send('Server Error');
  }
};

const loadSignin = async (req, res) => {
  try {
    const successMessage = req.session.successMessage||"";
    const errorMessage = req.session.message || "";
  
    req.session.successMessage = null;
    req.session.message = null;

    res.render('signin', { successMessage,errorMessage});
  } catch (err) {
    console.log('error in signingup ', err);
    res.status(500).send('Server Error');
  }
};

const signin = async (req, res) => {
  const password  = req.body.password;
  const email = req.body.email.toLowerCase().trim();
  try {
    const existingUser = await User.findOne({isAdmin:0,email:email });
    if (!existingUser) {
      return res.render("signin",{errorMessage:"Invalid credentials", successMessage: null })
    }
    if (existingUser.isBlocked) {
      return res.render('signin',{errorMessage:"User is Blocked by ADMIN", successMessage: null })
    }
    const passwordMatch = await bcrypt.compare(password, existingUser.password)
    if (!passwordMatch) {
      return res.render("signin",{errorMessage:"Incorrect Password", successMessage: null })
    }

    req.session.user = existingUser._id

    req.session.successMessage = 'Signed in successfully!';

    return res.redirect('/');
  }
  catch (err) {
    console.log('error in login ', err)
    return res.render("signin",{errorMessage:"Login failed please try again later", successMessage: null })
  }
}

module.exports = {
  loadHomePage,
  loadSignup,
  loadSignin,
  signup,
  verifyOtp,
  signin,
  pagenotfound,
};
