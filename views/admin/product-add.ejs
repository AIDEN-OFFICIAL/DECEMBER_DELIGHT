<%- include("../../views/partials/admin/header") %>
<head>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>
<style>
   .error-message{
       color: red;
   }


       .thumbnails-container {
           display: flex;
           overflow-x: auto;
       }


       .thumbnail {
           margin-right: 10px;
       }
.remove-icon {
    position: absolute;
    top: 115px;
    right: 0px;
    background-color: red;
    color: white;
    border-radius: 60%;
    padding: 3px 10px;
    cursor: pointer;
    font-size: larger;
}

</style>
   <section class="content-main">
       <div class="row">
           <div class="col-9">
               <div class="content-header">
                   <h2 class="content-title">Add New Product</h2>
               </div>
           </div>
           <div class="col-lg-6">
               <div class="card mb-4">
                   <div class="card-body">
                       <form method="post" action="/admin/addProducts" enctype="multipart/form-data"
                       onsubmit="return validateAndSubmit()">
                           <div class="mb-4">
                               <label for="product_name" class="form-label">Product Name</label>
                               <input type="text" placeholder="Type here" name="productName"
                                   class="form-control border" id="product_name">
                               <div id="productName-error" class="error-message"></div>
                           </div>
                        
                           <div class="mb-4">
                               <label class="form-label">Full description</label>
                               <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border"
                                   rows="4"></textarea>
                               <div id="description-error" class="error-message"></div>
                           </div>
                           <div class="row">
                               <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Regular price</label>
                                       <input placeholder="$" name="regularPrice" type="text"
                                           class="form-control border">
                                           <div id="regularPrice-error" class="error-message"></div>
                                   </div>
                               </div>
                               <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Sale price</label>
                                       <input placeholder="$" name="salePrice" type="text" class="form-control border">
                                       <div id="salePrice-error" class="error-message"></div>
                                   </div>
                               </div>
                               <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Quantity</label>
                                       <input placeholder="" name="quantity" type="text" class="form-control border">
                                       <div id="quantity-error" class="error-message"></div>
                                   </div>
                               </div>
                           </div>
                           <div class="card mb-4">
                               <div class="card-body">
                                   <div class="row gx-2">
                                       <div class="col-sm-6 mb-3">
                                           <label class="form-label">Category</label>
                                           <select class="form-select border" style="width: 150px;" name="category">
                                               <%for(let i=0;i<cat.length;i++){%>


                                              
                                                   <option value="<%=cat[i].name%>">
                                                    <%=cat[i].name%>
                                                   </option>
                                                   <%}%>
                                                 
                                                   
                                           </select>
                                           <div id="category-error" class="error-message"></div>
                                       </div>
                                   </div>
                               </div>
                           </div>
                           <div class="card mb-2">
                            <div class="card-header">
                                <h4>Choose images</h4>
                                <button type="button" id="addImageButton" class="btn btn-secondary">Add Image</button>
                            </div>
                            <div id="addedImagesContainer" class="thumbnails-container">
                                <!-- Thumbnails of selected images will appear here -->
                            </div>
                            <div class="border row" id="imageInputsContainer">
                                <div id="images-error" class="error-message"></div>
                                <!-- Dynamically added image inputs will go here -->
                            </div>
                           </div>
                           <div>
                               <button class="btn btn-md rounded font-sm hover-up"  type="submit">Publish</button>
                           </div>
                       </form>
                   </div>
               </div>
           </div>
       </div>
   </section>
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
 <script>
   let imageInputCount = 0; // Counter for image inputs
   let croppedImages = []; // Array to store cropped images as base64

    document.getElementById("addImageButton").addEventListener("click", function() {
    imageInputCount++; // Increment the count for each new input

    const container = document.getElementById("imageInputsContainer");

    // Create new input for image upload
    const inputContainer = document.createElement("div");
    inputContainer.className = "row mb-3";

    const input = document.createElement("input");
    input.type = "file";
    input.className = "form-control";
    input.accept = "image/png, image/jpeg, image/jpg";
    input.id = "input" + imageInputCount;

    // Create image preview
    const imgPreview = document.createElement("img");
    imgPreview.id = "imgView" + imageInputCount;
    imgPreview.alt = "Image Preview";
    imgPreview.style.width = "300px"; // Set a preview size
    imgPreview.style.display = "none"; // Hide initially

    // Create a cropper section
    const cropperContainer = document.createElement("div");
    cropperContainer.className = "image-cropper d-flex align-items-center";
    cropperContainer.style.display = "none"; // Hide initially
    cropperContainer.style.marginBottom = "50px";
    // const croppedImg = document.createElement("img");
    // croppedImg.id = "croppedImg" + imageInputCount;
    // croppedImg.alt = "Cropped Image";

    const saveButton = document.createElement("button");
    saveButton.type = "button";
    saveButton.id = "saveButton" + imageInputCount;
    saveButton.className = "btn-sm btn-primary";
    saveButton.innerText = "Save";

    // Add change event to handle image upload
    input.addEventListener("change", function(event) {
        viewImage(event, imageInputCount, imgPreview, cropperContainer, saveButton);
    });

    // cropperContainer.appendChild(croppedImg);
    cropperContainer.appendChild(saveButton);
    inputContainer.appendChild(input);
    inputContainer.appendChild(imgPreview);
    inputContainer.appendChild(cropperContainer);
    container.appendChild(inputContainer);
});

// Function to handle image preview and cropping
function viewImage(event, index, imgPreview, cropperContainer, saveButton){
let input = event.target;
let reader = new FileReader();

    reader.onload = function() {
        let dataURL = reader.result;
        imgPreview.src = dataURL;
        imgPreview.style.display = "block"; // Show the image preview

        // Initialize cropper
        let cropper = new Cropper(imgPreview, {
            aspectRatio: 1,
            viewMode: 1,
            guides: true,
            background: false,
            autoCropArea: 1,
            zoomable: true
        });

        // Display cropper controls
        // let cropperContainer =image.parentNode;
        cropperContainer.style.display = 'block';

        saveButton.style.display = 'inline-block'; // Show save button
        saveButton.disabled = false; // Enable save button
        
        // let saveButton = document.querySelector('#saveButton' + index);
        saveButton.addEventListener('click', async function () {
            let croppedCanvas = cropper.getCroppedCanvas();
            imgPreview.src = croppedCanvas.toDataURL('image/jpeg', 1.0);  // Update imgPreview with cropped image
            croppedImages.push(croppedCanvas.toDataURL('image/jpeg', 1.0));

            await croppedCanvas.toBlob(blob => {
                let input = document.getElementById('input' + index);
                let imgFile = new File([blob], `cropped-img-${Date.now()}-${index}.png`, { type: 'image/png' });
                const fileList = new DataTransfer();
                fileList.items.add(imgFile);
                input.files = fileList.files;
            });

            cropperContainer.style.display = 'none'; // Hide cropper after saving
            cropper.destroy(); // Destroy the cropper instance
            saveButton.style.display = 'none';

            displayThumbnail(dataURL, index);
            saveButton.removeEventListener('click', handleSave);
        });
    }

    reader.readAsDataURL(input.files[0]);
}

function displayThumbnail(croppedImageDataURL, index) {
       const addedImagesContainer = document.getElementById("addedImagesContainer");

       const thumbnail = document.createElement("div");
       thumbnail.classList.add("thumbnail");

       const img = document.createElement("img");
       img.src = croppedImageDataURL; // Display cropped image in thumbnail
       img.alt = "thumbnail";
       img.style.width = "100px"; // Set a thumbnail size
       img.style.height = "auto";

       const removeIcon = document.createElement("span");
       removeIcon.classList.add("remove-icon");
       removeIcon.innerHTML = "&times;";
       removeIcon.addEventListener("click", function () {
    // Clear all thumbnails and input fields
    clearAllImages();
});

function clearAllImages() {
    // Clear all thumbnails
    const addedImagesContainer = document.getElementById("addedImagesContainer");
    addedImagesContainer.innerHTML = ''; // Remove all thumbnail images

    // Remove all dynamically created input containers
    const imageInputsContainer = document.getElementById("imageInputsContainer");
    imageInputsContainer.innerHTML = ''; // Clear all file input fields

    // Hide any visible cropper containers if needed
    const cropperContainers = document.querySelectorAll(".image-cropper");
    cropperContainers.forEach(container => {
        container.style.display = 'none'; // Hide all cropper containers
    });

    // Clear the selected images array
    croppedImages.length = 0; // Reset the selected images array

    // Reset the image input count to start fresh
    imageInputCount = 0;

    // Optionally reset any other state if needed
}



       thumbnail.appendChild(img);
       thumbnail.appendChild(removeIcon);
       addedImagesContainer.appendChild(thumbnail);
   }
    
function validateAndSubmit() {
    clearErrorMessages();
    if (!validateForm()) {
        return false; // Prevent form submission if invalid
    }
    const form = document.querySelector('form');
    const croppedImagesField = document.createElement('input');
    croppedImagesField.type = 'hidden';
    croppedImagesField.name = 'croppedImages';
    croppedImagesField.value = JSON.stringify(croppedImages); // Convert array to JSON

    form.appendChild(croppedImagesField);
    return true; // Allow form submission if validation passes
}
    function validateForm() {
              const name = document.getElementsByName('productName')[0].value;
              const description = document.getElementById('descriptionid').value;
              const price = document.getElementsByName('regularPrice')[0].value;
              const saleprice = document.getElementsByName('salePrice')[0].value;
              const category = document.getElementsByName('category')[0].value;
              const images = document.getElementById('input1')
              let isValid = true
              if (name.trim() === "") {
      displayErrorMessage('productName-error', 'Please enter a product name.');
      isValid = false;
   } else if (!/^[a-zA-Z\s]+$/.test(name.trim())) {
      displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters.');
      isValid = false;
   }
            
   if (description.trim() === "") {
      displayErrorMessage('description-error', 'Please enter a product description.');
      isValid = false;
   } else if (!/^[a-zA-Z\s]+$/.test(description.trim())) {
      displayErrorMessage('description-error', 'Product description should contain only alphabetic characters.');
      isValid = false;
   }
  
   const quantity = document.getElementsByName('quantity')[0].value;
    if (quantity.trim() === "" || isNaN(quantity) || parseInt(quantity) < 0) {
        displayErrorMessage('quantity-error', 'Please enter a valid, non-negative quantity.');
        isValid = false;
    }
  
  
  
  
              if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
                  displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
                  isValid = false;
              }
  
  
  
  
              if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
                  displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
                  isValid = false;
              }
              if (parseFloat(price) <= parseFloat(saleprice)) {
      displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
      isValid = false;
   }
  
  

  
  
const imageInputs = document.querySelectorAll("input[type='file']");
const selectedImagesCount = Array.from(imageInputs).filter(input => input.files.length > 0).length;
    
    if (selectedImagesCount < 3) {
        displayErrorMessage("images-error", "Please select at least 3 images.");
        isValid = false;
    }
return isValid;
}


          function displayErrorMessage(elementId, message) {
              var errorElement = document.getElementById(elementId);
              errorElement.innerText = message;
              errorElement.style.display = "block";
          }
  
  
          function clearErrorMessages() {
              const errorElements = document.getElementsByClassName('error-message');
              Array.from(errorElements).forEach(element => {
                  element.innerText = '';
                  element.style.display = "none";
              });
              const errorMessage = document.getElementById('errorMessage');
  
  
          }


 </script>    
<%- include("../../views/partials/admin/footer") %>
